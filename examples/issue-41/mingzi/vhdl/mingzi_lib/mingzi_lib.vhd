-- Automatically generated by ForSyDe
library forsyde;
library ieee;
use forsyde.types.all;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


package types is

     type fsvec_int32 is array (fsvec_index range <>) of int32;
     
     type fsvec_fsvec_2_int32 is array (fsvec_index range <>) of fsvec_2_int32;
     
     subtype fsvec_2_int32 is fsvec_int32 (0 to 1);
     
     subtype fsvec_2_fsvec_2_int32 is fsvec_fsvec_2_int32 (0 to 1);
     
     function ex (vec : fsvec_int32;
                  ix : natural)
                 return int32;
     
     function sel (f : natural;
                   n : natural;
                   s : natural;
                   vec : fsvec_int32)
                  return fsvec_int32;
     
     function empty return fsvec_int32;
     
     function length (vec : fsvec_int32)
                     return natural;
     
     function isnull (vec : fsvec_int32)
                     return boolean;
     
     function replace (vec : fsvec_int32;
                       i : natural;
                       a : int32)
                      return fsvec_int32;
     
     function head (vec : fsvec_int32)
                   return int32;
     
     function last (vec : fsvec_int32)
                   return int32;
     
     function init (vec : fsvec_int32)
                   return fsvec_int32;
     
     function tail (vec : fsvec_int32)
                   return fsvec_int32;
     
     function take (n : natural;
                    vec : fsvec_int32)
                   return fsvec_int32;
     
     function drop (n : natural;
                    vec : fsvec_int32)
                   return fsvec_int32;
     
     function shiftl (vec : fsvec_int32;
                      a : int32)
                     return fsvec_int32;
     
     function shiftr (vec : fsvec_int32;
                      a : int32)
                     return fsvec_int32;
     
     function rotl (vec : fsvec_int32)
                   return fsvec_int32;
     
     function rotr (vec : fsvec_int32)
                   return fsvec_int32;
     
     function reverse (vec : fsvec_int32)
                      return fsvec_int32;
     
     function copy (n : natural;
                    a : int32)
                   return fsvec_int32;
     
     function plusgt (a : int32;
                      vec : fsvec_int32)
                     return fsvec_int32;
     
     function ltplus (vec : fsvec_int32;
                      a : int32)
                     return fsvec_int32;
     
     function plusplus (vec1 : fsvec_int32;
                        vec2 : fsvec_int32)
                       return fsvec_int32;
     
     function singleton (a : int32)
                        return fsvec_int32;
     
     function show (vec : fsvec_int32)
                   return string;
     
     function default return fsvec_int32;
     
     function ex (vec : fsvec_fsvec_2_int32;
                  ix : natural)
                 return fsvec_2_int32;
     
     function sel (f : natural;
                   n : natural;
                   s : natural;
                   vec : fsvec_fsvec_2_int32)
                  return fsvec_fsvec_2_int32;
     
     function empty return fsvec_fsvec_2_int32;
     
     function length (vec : fsvec_fsvec_2_int32)
                     return natural;
     
     function isnull (vec : fsvec_fsvec_2_int32)
                     return boolean;
     
     function replace (vec : fsvec_fsvec_2_int32;
                       i : natural;
                       a : fsvec_2_int32)
                      return fsvec_fsvec_2_int32;
     
     function head (vec : fsvec_fsvec_2_int32)
                   return fsvec_2_int32;
     
     function last (vec : fsvec_fsvec_2_int32)
                   return fsvec_2_int32;
     
     function init (vec : fsvec_fsvec_2_int32)
                   return fsvec_fsvec_2_int32;
     
     function tail (vec : fsvec_fsvec_2_int32)
                   return fsvec_fsvec_2_int32;
     
     function take (n : natural;
                    vec : fsvec_fsvec_2_int32)
                   return fsvec_fsvec_2_int32;
     
     function drop (n : natural;
                    vec : fsvec_fsvec_2_int32)
                   return fsvec_fsvec_2_int32;
     
     function shiftl (vec : fsvec_fsvec_2_int32;
                      a : fsvec_2_int32)
                     return fsvec_fsvec_2_int32;
     
     function shiftr (vec : fsvec_fsvec_2_int32;
                      a : fsvec_2_int32)
                     return fsvec_fsvec_2_int32;
     
     function rotl (vec : fsvec_fsvec_2_int32)
                   return fsvec_fsvec_2_int32;
     
     function rotr (vec : fsvec_fsvec_2_int32)
                   return fsvec_fsvec_2_int32;
     
     function reverse (vec : fsvec_fsvec_2_int32)
                      return fsvec_fsvec_2_int32;
     
     function copy (n : natural;
                    a : fsvec_2_int32)
                   return fsvec_fsvec_2_int32;
     
     function plusgt (a : fsvec_2_int32;
                      vec : fsvec_fsvec_2_int32)
                     return fsvec_fsvec_2_int32;
     
     function ltplus (vec : fsvec_fsvec_2_int32;
                      a : fsvec_2_int32)
                     return fsvec_fsvec_2_int32;
     
     function plusplus (vec1 : fsvec_fsvec_2_int32;
                        vec2 : fsvec_fsvec_2_int32)
                       return fsvec_fsvec_2_int32;
     
     function singleton (a : fsvec_2_int32)
                        return fsvec_fsvec_2_int32;
     
     function show (vec : fsvec_fsvec_2_int32)
                   return string;
     
     function default return fsvec_fsvec_2_int32;

end package types;


package body types is

     function ex (vec : fsvec_int32;
                  ix : natural)
                 return int32 is
     begin
          return vec(ix);
     end;
     
     function sel (f : natural;
                   n : natural;
                   s : natural;
                   vec : fsvec_int32)
                  return fsvec_int32 is
          variable res : fsvec_int32 (0 to n - 1);
     begin
          for i in res'range loop
               res(i) := vec(f + i * s);
          end loop;
          return res;
     end;
     
     function empty return fsvec_int32 is
          variable res : fsvec_int32 (0 to -1);
     begin
          return res;
     end;
     
     function length (vec : fsvec_int32)
                     return natural is
     begin
          return vec'length;
     end;
     
     function isnull (vec : fsvec_int32)
                     return boolean is
     begin
          return vec'length = 0;
     end;
     
     function replace (vec : fsvec_int32;
                       i : natural;
                       a : int32)
                      return fsvec_int32 is
          variable res : fsvec_int32 (0 to vec'length - 1);
     begin
          res := vec(0 to i - 1) & a & vec(i + 1 to vec'length - 1);
          return res;
     end;
     
     function head (vec : fsvec_int32)
                   return int32 is
     begin
          return vec(0);
     end;
     
     function last (vec : fsvec_int32)
                   return int32 is
     begin
          return vec(vec'length - 1);
     end;
     
     function init (vec : fsvec_int32)
                   return fsvec_int32 is
          variable res : fsvec_int32 (0 to vec'length - 2);
     begin
          res := vec(0 to vec'length - 2);
          return res;
     end;
     
     function tail (vec : fsvec_int32)
                   return fsvec_int32 is
          variable res : fsvec_int32 (0 to vec'length - 2);
     begin
          res := vec(1 to vec'length - 1);
          return res;
     end;
     
     function take (n : natural;
                    vec : fsvec_int32)
                   return fsvec_int32 is
          variable res : fsvec_int32 (0 to n - 1);
     begin
          res := vec(0 to n - 1);
          return res;
     end;
     
     function drop (n : natural;
                    vec : fsvec_int32)
                   return fsvec_int32 is
          variable res : fsvec_int32 (0 to vec'length - n - 1);
     begin
          res := vec(n to vec'length - 1);
          return res;
     end;
     
     function shiftl (vec : fsvec_int32;
                      a : int32)
                     return fsvec_int32 is
          variable res : fsvec_int32 (0 to vec'length - 1);
     begin
          res := a & init(vec);
          return res;
     end;
     
     function shiftr (vec : fsvec_int32;
                      a : int32)
                     return fsvec_int32 is
          variable res : fsvec_int32 (0 to vec'length - 1);
     begin
          res := tail(vec) & a;
          return res;
     end;
     
     function rotl (vec : fsvec_int32)
                   return fsvec_int32 is
          variable res : fsvec_int32 (0 to vec'length - 1);
     begin
          if isnull(vec) then
               res := vec;
          else
               res := last(vec) & init(vec);
          end if;
          return res;
     end;
     
     function rotr (vec : fsvec_int32)
                   return fsvec_int32 is
          variable res : fsvec_int32 (0 to vec'length - 1);
     begin
          if isnull(vec) then
               res := vec;
          else
               res := last(vec) & init(vec);
          end if;
          return res;
     end;
     
     function reverse (vec : fsvec_int32)
                      return fsvec_int32 is
          variable res : fsvec_int32 (0 to vec'length - 1);
     begin
          for i in res'range loop
               res(vec'length - i - 1) := vec(i);
          end loop;
          return res;
     end;
     
     function copy (n : natural;
                    a : int32)
                   return fsvec_int32 is
          variable res : fsvec_int32 (0 to n - 1) := (others => a);
     begin
          return res;
     end;
     
     function plusgt (a : int32;
                      vec : fsvec_int32)
                     return fsvec_int32 is
          variable res : fsvec_int32 (0 to vec'length);
     begin
          res := a & vec;
          return res;
     end;
     
     function ltplus (vec : fsvec_int32;
                      a : int32)
                     return fsvec_int32 is
          variable res : fsvec_int32 (0 to vec'length);
     begin
          res := vec & a;
          return res;
     end;
     
     function plusplus (vec1 : fsvec_int32;
                        vec2 : fsvec_int32)
                       return fsvec_int32 is
          variable res : fsvec_int32 (0 to vec1'length + vec2'length - 1);
     begin
          res := vec1 & vec2;
          return res;
     end;
     
     function singleton (a : int32)
                        return fsvec_int32 is
          variable res : fsvec_int32 (0 to 0) := (others => a);
     begin
          return res;
     end;
     
     function show (vec : fsvec_int32)
                   return string is
          function doshow (vec : fsvec_int32)
                          return string is
          begin
               case vec'length is
                    when 0 =>
                         return "";
                    when 1 =>
                         return show(head(vec));
                    when others =>
                         return show(head(vec)) & ',' & doshow(tail(vec));
               end case;
          end;
     begin
          return '<' & doshow(vec) & '>';
     end;
     
     function default return fsvec_int32 is
     begin
          return empty;
     end;
     
     function ex (vec : fsvec_fsvec_2_int32;
                  ix : natural)
                 return fsvec_2_int32 is
     begin
          return vec(ix);
     end;
     
     function sel (f : natural;
                   n : natural;
                   s : natural;
                   vec : fsvec_fsvec_2_int32)
                  return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to n - 1);
     begin
          for i in res'range loop
               res(i) := vec(f + i * s);
          end loop;
          return res;
     end;
     
     function empty return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to -1);
     begin
          return res;
     end;
     
     function length (vec : fsvec_fsvec_2_int32)
                     return natural is
     begin
          return vec'length;
     end;
     
     function isnull (vec : fsvec_fsvec_2_int32)
                     return boolean is
     begin
          return vec'length = 0;
     end;
     
     function replace (vec : fsvec_fsvec_2_int32;
                       i : natural;
                       a : fsvec_2_int32)
                      return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to vec'length - 1);
     begin
          res := vec(0 to i - 1) & a & vec(i + 1 to vec'length - 1);
          return res;
     end;
     
     function head (vec : fsvec_fsvec_2_int32)
                   return fsvec_2_int32 is
     begin
          return vec(0);
     end;
     
     function last (vec : fsvec_fsvec_2_int32)
                   return fsvec_2_int32 is
     begin
          return vec(vec'length - 1);
     end;
     
     function init (vec : fsvec_fsvec_2_int32)
                   return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to vec'length - 2);
     begin
          res := vec(0 to vec'length - 2);
          return res;
     end;
     
     function tail (vec : fsvec_fsvec_2_int32)
                   return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to vec'length - 2);
     begin
          res := vec(1 to vec'length - 1);
          return res;
     end;
     
     function take (n : natural;
                    vec : fsvec_fsvec_2_int32)
                   return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to n - 1);
     begin
          res := vec(0 to n - 1);
          return res;
     end;
     
     function drop (n : natural;
                    vec : fsvec_fsvec_2_int32)
                   return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to vec'length - n - 1);
     begin
          res := vec(n to vec'length - 1);
          return res;
     end;
     
     function shiftl (vec : fsvec_fsvec_2_int32;
                      a : fsvec_2_int32)
                     return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to vec'length - 1);
     begin
          res := a & init(vec);
          return res;
     end;
     
     function shiftr (vec : fsvec_fsvec_2_int32;
                      a : fsvec_2_int32)
                     return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to vec'length - 1);
     begin
          res := tail(vec) & a;
          return res;
     end;
     
     function rotl (vec : fsvec_fsvec_2_int32)
                   return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to vec'length - 1);
     begin
          if isnull(vec) then
               res := vec;
          else
               res := last(vec) & init(vec);
          end if;
          return res;
     end;
     
     function rotr (vec : fsvec_fsvec_2_int32)
                   return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to vec'length - 1);
     begin
          if isnull(vec) then
               res := vec;
          else
               res := last(vec) & init(vec);
          end if;
          return res;
     end;
     
     function reverse (vec : fsvec_fsvec_2_int32)
                      return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to vec'length - 1);
     begin
          for i in res'range loop
               res(vec'length - i - 1) := vec(i);
          end loop;
          return res;
     end;
     
     function copy (n : natural;
                    a : fsvec_2_int32)
                   return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to n - 1) := (others => a);
     begin
          return res;
     end;
     
     function plusgt (a : fsvec_2_int32;
                      vec : fsvec_fsvec_2_int32)
                     return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to vec'length);
     begin
          res := a & vec;
          return res;
     end;
     
     function ltplus (vec : fsvec_fsvec_2_int32;
                      a : fsvec_2_int32)
                     return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to vec'length);
     begin
          res := vec & a;
          return res;
     end;
     
     function plusplus (vec1 : fsvec_fsvec_2_int32;
                        vec2 : fsvec_fsvec_2_int32)
                       return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to vec1'length + vec2'length -
                                                   1);
     begin
          res := vec1 & vec2;
          return res;
     end;
     
     function singleton (a : fsvec_2_int32)
                        return fsvec_fsvec_2_int32 is
          variable res : fsvec_fsvec_2_int32 (0 to 0) := (others => a);
     begin
          return res;
     end;
     
     function show (vec : fsvec_fsvec_2_int32)
                   return string is
          function doshow (vec : fsvec_fsvec_2_int32)
                          return string is
          begin
               case vec'length is
                    when 0 =>
                         return "";
                    when 1 =>
                         return show(head(vec));
                    when others =>
                         return show(head(vec)) & ',' & doshow(tail(vec));
               end case;
          end;
     begin
          return '<' & doshow(vec) & '>';
     end;
     
     function default return fsvec_fsvec_2_int32 is
     begin
          return empty;
     end;

end package body types;
